// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role_curd.sql

package db

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (role_name,  created_by, updated_by )
VALUES ($1, $2, $3)
RETURNING id, role_name, created_at, created_by, updated_by, updated_at
`

type CreateRoleParams struct {
	RoleName  sql.NullString `db:"role_name"`
	CreatedBy sql.NullString `db:"created_by"`
	UpdatedBy sql.NullString `db:"updated_by"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Roles, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.RoleName, arg.CreatedBy, arg.UpdatedBy)
	var i Roles
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, role_name, created_at, created_by, updated_by, updated_at FROM roles WHERE id = $1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Roles, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Roles
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET role_name = $1, updated_by = $2
WHERE id = $3
`

type UpdateRoleParams struct {
	RoleName  sql.NullString `db:"role_name"`
	UpdatedBy sql.NullString `db:"updated_by"`
	ID        int64          `db:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.RoleName, arg.UpdatedBy, arg.ID)
	return err
}
